{"mappings":"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","sources":["src/types/Actor.ts","src/actors/FPSViewer.ts","src/actors/Timer.ts","src/actors/Score.ts","src/actors/Instructions.ts","src/utils/CanvasMeasureVars.ts","src/actors/GameSpace.ts","src/actors/NextPiece.ts","src/actors/Piece.ts","src/utils/Actor.generator.ts","src/app.ts"],"sourcesContent":["import { Point } from \"./Point\";\n\nexport interface IActor {\n\tposition: Point;\n  update: (delta: number) => void;\n  keyboard_event:(key: string) => void;\n\tkeyboard_event_down?: (key: string) => void;\n\tkeyboard_event_up?: (key: string) => void;\n\tdraw: (delta: number, ctx: CanvasRenderingContext2D) => void;\n}\n\nexport class Actor implements IActor {\n  position!: Point;\n  contructor(position: Point) {\n    this.position = position;\n  }\n  update(delta: number) {}\n  draw(delta: number, ctx: CanvasRenderingContext2D) {}\n  keyboard_event(key: string) {}\n}\n\nexport type Size = {w: number, h:number}","import { Actor } from \"../types/Actor\"\n\nexport class FPSViewer extends Actor {\n\tupdate() { }\n\tkeyboard_event() { }\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tconst fps = (1 / delta).toFixed(0)\n\t\tctx.font = \"30px Arial\"\n\t\tctx.fillStyle = \"red\"\n\t\tctx.fillText(`FPS: ${fps}`, 5, 30)\n\t}\n}","import { Actor } from \"../types/Actor\"\n\nexport class Timer extends Actor {\n\tupdate() { }\n\tkeyboard_event() { }\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tconst timer = \"00:00\"\n\t\tctx.font = \"30px Arial\"\n\t\tctx.fillStyle = \"red\"\n\t\tctx.fillText(`Time: ${timer}`, 5, 80)\n\t}\n}\n\n//generar un cronometro solo para segundos y minutos","import { Actor } from \"../types/Actor\";\n\nexport class Score extends Actor {\n  update() {}\n  keyboard_event() {}\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n    const score = \"00\";\n    ctx.font = \"30px Arial\";\n    ctx.fillStyle = \"red\";\n    ctx.fillText(`Score: ${score}`, 5, 130);\n  }\n}\n","import { Actor } from \"../types/Actor\";\n\nexport class Instructions extends Actor {\n  update() {}\n  keyboard_event() {}\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n    ctx.font = \"20px Arial\";\n    ctx.fillStyle = \"red\";\n\t  ctx.fillText(`Instructions`, 780, 30);\n\t  ctx.fillText(`ArrowUp: Rotate`, 780, 70);\n\t  ctx.fillText(`ArrowLeft: Move to left`, 780, 110);\n\t  ctx.fillText(`ArrowRight: Move to right`, 780, 150);\n\t  ctx.fillText(`ArrowDown: Soft drop`, 780, 190);\n    ctx.fillText(`Spacebar: Hard drop`, 780, 230);\n  }\n}\n","const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\nexport const canvasWidth: number = canvas.width;\nexport const canvasHeight: number = canvas.height;\nexport const playWidth: number = canvas.width / 2;\nexport const playHeight: number = canvasHeight;\nexport const pieceUnit: number = playWidth / 12;","import { Actor } from \"../types/Actor\"\nimport {canvasWidth, playWidth, playHeight } from \"../utils/CanvasMeasureVars\"\n\nexport class GameSpace extends Actor {\n\tupdate() { }\n\tkeyboard_event() { }\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tctx.strokeStyle = \"Red\"\n\t\tctx.strokeRect(canvasWidth/4, 0, playWidth, playHeight)\n\t}\n}","import { Actor } from \"../types/Actor\";\nimport { canvasWidth, canvasHeight } from \"../utils/CanvasMeasureVars\";\n\nexport class PieceViewer extends Actor {\n  update() {}\n  keyboard_event() {}\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = \"Red\";\n    ctx.strokeRect(canvasWidth*13/16, canvasHeight*5/8, canvasWidth * 2/16, canvasHeight*2/8);\n  }\n}\n","export const pieza = {\n  LR: [\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 1, 0],\n    [0, 0, 0, 0, 0],\n  ],\n  LL: [\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n  ],\n  Z: [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [0, 0, 1, 1, 0],\n    [0, 0, 0, 0, 0],\n  ],\n  S: [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 1, 0],\n    [0, 1, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n  ],\n  Q: [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 1, 0],\n    [0, 0, 1, 1, 0],\n    [0, 0, 0, 0, 0],\n  ],\n  I: [\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n  ],\n  T: [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 0, 0],\n  ],\n};\n\n//rotacion de matriz \n//no hay velocidad solo actualizacion de posicion","import { Actor, Size } from \"../types/Actor\";\nimport { Point } from \"../types/Point\";\nimport {\n  canvasWidth,\n  canvasHeight,\n  playWidth,\n  playHeight,\n  pieceUnit,\n} from \"../utils/CanvasMeasureVars\";\nimport { pieza } from \"../actors/Piece\";\n\n//deberia tener un array para las rotaciones de cada pieza?\nlet piecesColor = [\n  \"yellow\",\n  \"blue\",\n  \"orange\",\n  \"red\",\n  \"green\",\n  \"cyan\",\n  \"purple\",\n];\n\nexport class PiecesActors extends Actor {\n  pieceSize: number;\n  origin: Point;\n  speed: Point;\n  currentPiece: any;\n  //pieceColor: string;\n  constructor(initialPos: Point) {\n    super();\n    this.pieceSize = pieceUnit;\n    this.origin = { x: initialPos.x, y: initialPos.y };\n    this.speed = { x: 0, y: pieceUnit / 2 };\n    this.currentPiece = pieza.I;\n    console.log(pieza);\n    //\tthis.pieceColor = \"red\" deberia tener un array de colores para asignarlos a cada pieza\n  }\n  update(delta: number) {\n    let newPosY = (this.origin.y += this.speed.y * delta);\n    if (newPosY < canvasHeight - this.pieceSize && newPosY >= 0) {\n      this.origin.y = newPosY;\n    }\n  }\n  rotate() {}\n\n  keyboard_event(key: string) {\n    switch (key) {\n      case `ArrowRight`:\n        if (\n          this.origin.y != canvasHeight - this.pieceSize &&\n          this.origin.x >= playWidth / 2 &&\n          this.origin.x < (playWidth * 3) / 2 - this.pieceSize\n        ) {\n          this.origin.x += this.pieceSize / 2;\n        }\n        break;\n      case `ArrowLeft`:\n        if (\n          this.origin.y != canvasHeight - this.pieceSize &&\n          this.origin.x > playWidth / 2 + this.pieceSize / 2 &&\n          this.origin.x < (playWidth * 3) / 2 - this.pieceSize / 2\n        ) {\n          this.origin.x -= this.pieceSize / 2;\n        }\n        break;\n      case `ArrowDown`:\n        if (this.origin.y == canvasHeight - this.pieceSize) {\n          this.speed.y = 0;\n          this.speed.x = 0;\n        } else {\n          this.speed.y += this.pieceSize;\n        }\n        // console.log(\"->\")\n        // this.speed.y ++\n        // console.log(this.speed.y)\n        break;\n      case ` `:\n        this.origin.y = canvasHeight - this.pieceSize;\n        this.speed.x = 0;\n        this.speed.y = 0;\n        break;\n    }\n  }\n\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    ctx.translate(this.origin.x, this.origin.y);\n    for (let x = 0; x < this.currentPiece.length; x++) {\n      for (let y = 0; y < this.currentPiece[x].length; y++) {\n        if (this.currentPiece[x][y] == 1) {\n          ctx.fillRect(\n            this.pieceSize * y,\n            this.pieceSize * x,\n            this.pieceSize,\n            this.pieceSize\n          );\n        }\n      }\n    }\n    ctx.restore();\n  }\n}\n","import { Actor, IActor } from \"./types/Actor\"\nimport { Piece } from \"./actors/Actors\"\nimport { FPSViewer } from \"./actors/FPSViewer\"\nimport { Timer } from \"./actors/Timer\"\nimport { Score } from \"./actors/Score\"\nimport { Instructions } from \"./actors/Instructions\"\nimport { GameSpace } from \"./actors/GameSpace\"\nimport { pieceUnit } from \"./utils/CanvasMeasureVars\"\nimport { PieceViewer } from \"./actors/NextPiece\"\nimport {PiecesActors} from \"./utils/Actor.generator\"\n\nwindow.onload = () => {\n\tconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n\tconst ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n\tlet instructions = new Instructions\n\tlet gameSpace = new GameSpace\n\tlet pieceViewer = new PieceViewer\n\tlet fps = new FPSViewer\n\tlet timer = new Timer\n\tlet score = new Score\n\t//let piece = new Piece({ x: canvas.width/2 - pieceUnit/2, y: 0 });\n\tlet pieces = new PiecesActors({ x: canvas.width / 2 - pieceUnit / 2, y: 0 });\n\n\tlet actors: Array<IActor> = [instructions, gameSpace,pieceViewer,pieces, fps, timer, score]\n\n\tlet lastFrame = 0;\n\tconst render = (time: number) => {\n\t\tlet delta = (time - lastFrame) / 1000;\n\t\tlastFrame = time;\n\t\tactors.forEach(e => e.update(delta))\n\t\tctx.clearRect(0, 0, canvas.width, canvas.width);\n\t\tactors.forEach(e => {\n\t\t\tctx.save()\n\t\t\te.draw(delta, ctx)\n\t\t\tctx.restore()\n\t\t})\n\t\twindow.requestAnimationFrame(render)\n\t}\n\twindow.requestAnimationFrame(render)\n\n\tdocument.body.addEventListener(\"keydown\", e => {\n\t\tactors.forEach(actor => {\n\t\t\tactor.keyboard_event(e.key)\n\t\t})\n\t})\n\n}"],"names":["$c2f1b17ab47188d2$export$f73d3eb6fd876d80","contructor","position","this","update","delta","draw","delta1","ctx","keyboard_event","key","$37691bb6273e74a0$export$13acb86b4b3ca30e","fps","toFixed","font","fillStyle","fillText","$3611c8eba973299f$export$c57e9b2d8b9e4de","$75d728c98ce73e29$export$6735cf84ecd2736","$a5ba87a7ba5694f9$export$9e5bb8ba6c1f6b31","$a1da430b7eb2d99b$var$canvas","document","getElementById","$a1da430b7eb2d99b$export$1cd840e6ecaab774","getContext","width","$a1da430b7eb2d99b$export$3d795bc15e02aca","height","$a1da430b7eb2d99b$export$2c706fef3b6901b6","$a1da430b7eb2d99b$export$a5bf19f383511af0","$a1da430b7eb2d99b$export$d9af610e8738a357","$03a97d35b9928c65$export$853df802079d34ae","strokeStyle","strokeRect","$ac5b64dd1f32787e$export$4192715f4aed5c31","$38732986643d4049$export$664574f08d736d8d","LR","LL","Z","S","Q","I","T","$3186ae4db610bc64$export$b1e86a4f973da565","initialPos","super","pieceSize","origin","x","y","speed","currentPiece","console","log","newPosY","rotate","save","translate","length","fillRect","restore","window","onload","canvas","instructions","gameSpace","pieceViewer","timer","score","actors","lastFrame","render","time","forEach","e","clearRect","requestAnimationFrame","body","addEventListener","actor"],"version":3,"file":"index.63068c86.js.map"}